libccli(3)
==========

NAME
----
ccli_alloc, ccli_free, ccli_in, ccli_out, ccli_register_command,
ccli_unregister_command, ccli_loop - A CLI interface for C programs.

SYNOPSIS
--------
[verse]
--
*#include <ccli.h>*

struct ccli pass:[*]*ccli_alloc*(const char pass:[*]_prompt_, int _in_, int _out_);
void *ccli_free*(struct ccli pass:[*]_ccli_);

int *ccli_in*(struct ccli pass:[*]_ccli_);
int *ccli_out*(struct ccli pass:[*]_ccli_);

int *ccli_register_command*(struct ccli pass:[*]_ccli_, const char pass:[*]_command_name_,
			  int (pass:[*]_callback_)(struct ccli pass:[*], const char pass:[*], const char pass:[*],
						   void pass:[*], int, char pass:[**]),
			  void pass:[*]_data_);

int *ccli_unregister_command*(struct ccli pass:[*]_ccli_, const char pass:[*]_command_name_);

int *ccli_loop*(struct ccli pass:[*]_ccli_);
--

DESCRIPTION
-----------
This is a simple API to create a CLI interface with the user. To start, create
the _ccli_ descriptor with *ccli_alloc()*. The interface created will have
the prompt defined by _prompt_ (none if _prompt_ is NULL), and till take over
control of the input and output file descriptors _in_ and _out_ (usually
passed in as STDIN_FILENO and STDOUT_FILENO respectively).

The file descriptors passed to *ccli_alloc()* can be retrived with *ccli_in()*
for the input _in_ file desrciptor and *ccli_out()* for the output _out_
file descriptor.

Calling *ccli_loop()* with the _ccli_ descriptor, will then read on the
input file descriptor waiting for input. The user (who is on the other end
of the file descriptor, probably at a terminal window) will see the
prompt and can start typing like in a normal shell. When they hit "enter"
commands will be executed that match the first word of what the user
typed.

By default, only the "exit" command is registered when the _ccli_ descriptor
is created. This will simply exit the loop.

Use *ccli_unregister_command()* to remove a registered command, including
the default "exit" command.

As the *ccli_loop()* is rather useless without more commands than just "exit",
it is expected to add new commands with *ccli_register_command()*. This takes
the _ccli_ descriptor, a command name (must be a single word), a _callback_
function to get called when the user enters it, and _data_ that will be
passed to the _callback_ (if needed).

The _callback_ has the following prototype:
[verse]
--
   int *callback*(struct ccli pass:[*]_ccli_, const char pass:[*]_command_, const char pass:[*]_line_,
		void pass:[*]_data_, int _argc_, char pass:[**]_argv_);
--

When the user enters the command that is registered, adds parameters, and then
hits "enter", the registered _callback_ function for that command will be
called with the following parameters:

_ccli_ - will be the _ccli_ descriptor returned by *ccli_alloc()*

_command_ - a string that matches the command that the user typed.

_line_ - The full line that the user typed when they hit "enter".

_data_ - The _data_ that was passed in when the command was registered with
         *ccli_register_command()*.

_argc_ - The number of words that the user typed. If the command had no
	other parameters but the command itself, then _argc_ will be 1.
	That means _argc_ will never be less than 1.

_argv_ - A string array of each word the user typed. Note, a word may
        have spaces in it if the user surrounded the string with
	single or double quotes.

Although _argv_ and _command_ may contain the same string, they are not
the same pointer. _command_ must not be modified, where's any of the stings
in _argv_, including the first one, is free to be modified. They will be
discarded on return of the _callback_.

RETURN VALUE
------------
*ccli_alloc()* returns the descriptor to use to control the _ccfi_ interface,
and NULL on error.

*ccli_loop()* returns 0 on success (exited via a command) and -1 on error.

*ccli_registrer_command()* returns 0 on success and -1 on error.

*ccli_in()* returns the input file descriptor from *ccli_alloc()*.

*ccli_out()* returns the output file descriptor from *ccli_alloc()*.

ERRORS
------
The following errors are for all the above calls:

*ENOMEM* Memory allocation error.

*EINVAL* One of the input parameters was invalid.

For *ccli_register_command()*

*ENODEV* - The command was not found.

EXAMPLE
-------
[source,c]
--
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <ccli.h>

static int say_hello(struct ccli *ccli, const char *command,
		     const char *line, void *data,
		     int argc, char **argv)
{
	char *this = (char *)data;
	int i;

	/* command matches argv[0] */
	/* line is the full line that was typed */
	/* argc is the number of words in the line */
	/* argv is the individual words */

	ccli_printf(ccli, "You typed %s\n", line);
	ccli_printf(ccli, "which is broken up into:\n");
	for (i = 0; i < argc; i++)
		ccli_printf(ccli, "word %d:\t%s\n", i, argv[i]);

	ccli_printf(ccli, "And this is passed %s\n", this);

	ccli_printf(ccli, "Type 'goodbye' to quit\n");

	/* returning anything but zero will exit the loop */
	/* By default, ccli will add the "exit" command to exit the loop */
	return 0;
}

#define ARRAY_SIZE(array) (sizeof(array) / sizeof((array)[0]))

static int hello_completion(struct ccli *ccli, const char *command,
			    const char *line, int word, char *match,
			    char ***list, void *data)
{
	const char *word1[] = {
		"Sir", "Madam", "you", "kitty", "is", "for", "my",
		"good", "Mr." };
	const char *word2[] = {
		"Darling", "there", "now", "Hunk", "Bond" };
	const char *word3[] = { "anybody", "I" };
	const char *word4[] = { "out", "want" };
	const char *word5[] = { "there", "you" };
	const char **words;
	char **l;
	int len;
	int i;

	switch(word) {
	case 1:
		words = word1;
		len = ARRAY_SIZE(word1);
		break;
	case 2:
		words = word2;
		len = ARRAY_SIZE(word2);
		/* Add a comma */
		match[strlen(match)] = ',';
		break;
	case 3:
		words = word3;
		len = ARRAY_SIZE(word3);
		break;
	case 4:
		words = word4;
		len = ARRAY_SIZE(word4);
		break;
	case 5:
		words = word5;
		len = ARRAY_SIZE(word5);
		break;
	default:
		return -1;
	}

	/*
	 * We do not worry about matching, the caller will only display
	 * words that do match "match".
	 */
	l = calloc(len, sizeof(char *));
	if (!l)
		return -1;

	for (i = 0; i < len; i++) {
		l[i] = strdup(words[i]);
		/*
		 * If the above fails to alloc, the caller will just
		 * ignore this field. It will be treated as a non-match.
		 * This may be an issues for the user, but if there's
		 * memory allocation issues, the user probably has more
		 * to worry about.
		 */
	}

	*list = l;
	return len;
}

static int say_goodbye(struct ccli *ccli, const char *command,
		       const char *line, void *data,
		       int argc, char **argv)
{
	ccli_printf(ccli, "Goodbye!\n");
	return 1;
}

static int do_interrupt(struct ccli *ccli, const char *line, int pos,
	void *data)
{
	char *what = data;

	if (pos < strlen(line)) {
		ccli_printf(ccli, ">%s<%s\n", what, line + pos);
		ccli_printf(ccli, "myprompt> %s", line);
		while (pos++ < strlen(line))
			ccli_printf(ccli, "\b");
	} else {
		ccli_line_clear(ccli);
		ccli_printf(ccli, "\n%s!!!> %s", what, line);
	}
	return 0;
}

int main(int argc, char **argv)
{
	struct ccli *ccli;
	char *this_data = "something here";

	ccli = ccli_alloc("myprompt> ", STDIN_FILENO, STDOUT_FILENO);

	ccli_register_command(ccli, "hello", say_hello, this_data);

	ccli_register_completion(ccli, "hello", hello_completion);

	/* We only use 'goodbye' to exit */
	ccli_unregister_command(ccli, "exit");
	ccli_register_command(ccli, "goodbye", say_goodbye, NULL);
	ccli_register_interrupt(ccli, do_interrupt, "OUCH!");

	ccli_loop(ccli);

	ccli_free(ccli);

	return 0;
}
--
FILES
-----
[verse]
--
*ccli.h*
	Header file to include in order to have access to the library APIs.
*-ccli*
	Linker switch to add when building a program that uses the library.
--

SEE ALSO
--------
*libccli*(3),
*ccli_register_default*(3),
*ccli_register_unknown*(3),
*ccli_register_interrupt*(3),
*ccli_printf*(3),
*ccli_vprintf*(3),
*ccli_getchar*(3)
*ccli_line_parse*(3),
*ccli_line_reset*(3),
*ccli_line_inject*(3),
*ccli_line_refresh*(3),
*ccli_argv_free*(3),
*ccli_history*(3),
*ccli_history_load*(3),
*ccli_history_save*(3),
*ccli_history_load_file*(3),
*ccli_history_save_file*(3),
*ccli_history_load_fd*(3),
*ccli_history_save_fd*(3)
*ccli_execute*(3)

AUTHOR
------
[verse]
--
*Steven Rostedt* <rostedt@goodmis.org>
--
REPORTING BUGS
--------------
Report bugs to  <rostedt@goodmis.org>

LICENSE
-------
libccli is Free Software licensed under the GNU LGPL 2.1

RESOURCES
---------
https://github.com/rostedt/libccli

COPYING
-------
Copyright \(C) 2022 Steven Rostedt. Free use of this software is granted under
the terms of the GNU Public License (GPL).
