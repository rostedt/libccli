libccli(3)
==========

NAME
----
ccli_register_completion, ccli_list_add, ccli_list_insert, ccli_list_add_printf,
ccli_list_free - Add completions for the CLI interface for C programs

SYNOPSIS
--------
[verse]
--
*#include <ccli.h>*

int *ccli_register_completion*(struct ccli pass:[*]_ccli_, const char pass:[*]_command_name_,
			  int (pass:[*]_completion_)(struct ccli pass:[*], const char pass:[*], const char pass:[*],
						   int, char pass:[*], char pass:[***], void pass:[*]));

int *ccli_list_add*(struct ccli pass:[*]ccli, char pass:[***]list, int pass:[*]cnt, const char pass:[*]word);
int *ccli_list_insert*(struct ccli pass:[*]ccli, char pass:[***]list, int pass:[*]cnt, char pass:[*]word);
int *ccli_list_add_printf*(struct ccli pass:[*]ccli, char pass:[***]list, int pass:[*]cnt, const char pass:[*]fmt, ...);
void *ccli_list_free*(struct ccli pass:[*]ccli, char pass:[***]list, int cnt);
--

DESCRIPTION
-----------
This is a simple API to create a CLI interface with the user. To start, create
the _ccli_ descriptor with *ccli_alloc()*. The interface created will have
the prompt defined by _prompt_ (none if _prompt_ is NULL), and till take over
control of the input and output file descriptors _in_ and _out_ (usually
passed in as STDIN_FILENO and STDOUT_FILENO respectively).

By default, there is tab completion for any registered command. That is,
if the user types a few characters then hits tab, if what they type
matches a single command, it will be filled in for them. If there's more
than one match and the user hits tab more than once, it will display
a list of possible matches (similar to what bash does). But this is only for
the commands. For parameters after the command, any completions must be
registered with *ccli_register_completion()*, which takes the _ccli_
descriptor returned by *ccli_alloc()*, the _command_name_ to register a
_completion_ function for. Note, if the command that matches _command_name_
already has a completion function registered it, then it will be replaced by
_completion_ of this call. Only one completion function may be registered
to a command at a time.

The _completion_ function has the following prototype:
[verse]
--
   int *completion*(struct ccli pass:[*]_ccli_, const char pass:[*]_command_, const char pass:[*]_line_,
		 int _word_, char pass:[*]_match_, char pass:[***]_list_, void pass:[*]_data_);
--

When the user hits "tab" for a command that has a completion registered to it,
the _completion_ callback is called with the following parameters:

_ccli_ - will be the _ccli_ descriptor returned by *ccli_alloc()*

_command_ - a string that matches the command of the first word.

_line_ - The full line up to where the user's cursor is.

_word_ - The index of the word being matched (zero being the command itself, and
	the first parameter would be one).

_match_ - The word that is currently being completed (empty if the cursor is
         on a space). May be modified to show what to append on match.

_list_ - A pointer to a string array that should be allocated and filled in
         with the list of possible matches.

_data_ - The _data_ that was passed in when the command was registered with
        *ccli_register_completion()*.

The _completion_ callback is expected to allocate a list of strings (char pass:[**])
and fill it with allocated strings (char pass:[*]) of what matches. The return of
_completion_ is the number of allocated words in the _list_. If zero or negative
is returned, then *list should not be allocated, and any allocation done by _completion_
should be cleaned up before the return. See EXAMPLE for an example of handling
completions for a specific command. It is recommended that the list is modified with
the helper functions described here. It is not required, but either the list is
modified manually, or it is modified only by the helper functions. As the helper
functions have implementation assumptions, it can be corrupted if the list is
modified both with the hepler functions and manually.

By default, on a single match, the word that matches will be added plus a single
space behind it. To change this behavior, and add something other than a space
(for example a '/'), the _match_ parameter can have its ending nul '\0' character
replaced with the character to append. If it is replaced with CCLI_NOSPACE, then
nothing will be appended to the matched word.

*ccli_list_add()* will make a copy of the passed in _word_ and add it to the _list_.

*ccli_list_insert()* will add the _word_ to the list. The _word_ passed in must be
able to be freed with *free*(3), as it will be freed when the _list_ is freed.

*ccli_list_add_printf()* will allocate a string that holds the format provided by
_fmt_ and the parameters, similar to *snprintf*(3) does.

*ccli_list_free()* will free the list.

*NOTE:* The _cnt_ passed into all the above must be initialized to zero before calling,
and must not be manipulated by the application. The above functions will modify _cnt_
and will depend on its content to keep the integrity of the algorithm.


RETURN VALUE
------------
*ccli_register_completion()* returns 0 on success and -1 on error.

*ccli_list_add()*, *ccli_list_insert()*, and *ccli_list_add_printf()* all
return -1 on failure to increase the size, and on success, will return the
number of items in the _list_.

ERRORS
------
The following errors are for all the above calls:

*ENOMEM* Memory allocation error.

*EINVAL* One of the input parameters was invalid.

For *ccli_register_completion()*:

*ENODEV* - The command was not found.

EXAMPLE
-------
[source,c]
--
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <ccli.h>

static int do_it(struct ccli *ccli, const char *command,
		 const char *line, void *data,
		 int argc, char **argv)
{
	ccli_printf(ccli, "You typed %s\n", line);
	return 0;
}

#define ARRAY_SIZE(array) (sizeof(array) / sizeof((array)[0]))

static int do_the_completion(struct ccli *ccli, const char *command,
			     const char *line, int word, char *match,
			     char ***list, void *data)
{
	const char *word1[] = { "a", "b", "c" };
	const char *word2[] = { "1", "2", "3" };
	char **argv;
	int argc;
	int cnt = 0;
	int ret = 0;
	int i;

	argc = ccli_line_parse(line, &argv);
	if (argc < 0)
		return 0;

	switch(word) {
	case 1:
		for (i = 0; ret >= 0 && i < ARRAY_SIZE(word1); i++)
			ret = ccli_list_add(ccli, list, &cnt, word1[i]);
		break;
	case 2:
		if (argc < 2)
			break;
		for (i = 0; ret >= 0 && i < ARRAY_SIZE(word2); i++)
			ret = ccli_list_add_printf(ccli, list, &cnt, "%s[%s]", word2[i], argv[1]);
		break;
	case 3:
		if (argc < 2)
			break;
		/* Copy argv[1] into the list */
		ret = ccli_list_insert(ccli, list, &cnt, argv[1]);
		if (ret > 0) {
			/* The list now owns it. */
			argv[1] = NULL;
		}
		break;
	default:
		ret = -1;
	}
	ccli_argv_free(argv);
	if (ret < 0)
		ccli_list_free(ccli, list, cnt);
	return ret;
}

int main(int argc, char **argv)
{
	struct ccli *ccli;

	ccli = ccli_alloc("comp> ", STDIN_FILENO, STDOUT_FILENO);

	ccli_register_command(ccli, "do", do_it, NULL);

	ccli_register_completion(ccli, "do", do_the_completion);

	ccli_loop(ccli);

	ccli_free(ccli);

	return 0;
}
--

FILES
-----
[verse]
--
*ccli.h*
	Header file to include in order to have access to the library APIs.
*-ccli*
	Linker switch to add when building a program that uses the library.
--

SEE ALSO
--------
*libccli*(3),
*ccli_alloc*(3),
*ccli_free*(3),
*ccli_in*(3),
*ccli_out*(3),
*ccli_register_command*(3),
*ccli_register_default*(3),
*ccli_register_unknown*(3),
*ccli_loop*(3),
*ccli_register_default*(3),
*ccli_register_unknown*(3),
*ccli_register_interrupt*(3),
*ccli_printf*(3),
*ccli_vprintf*(3),
*ccli_getchar*(3)
*ccli_line_parse*(3),
*ccli_line_clear*(3),
*ccli_line_inject*(3),
*ccli_line_refresh*(3),
*ccli_argv_free*(3),
*ccli_history*(3),
*ccli_history_load*(3),
*ccli_history_save*(3),
*ccli_history_load_file*(3),
*ccli_history_save_file*(3),
*ccli_history_load_fd*(3),
*ccli_history_save_fd*(3)
*ccli_execute*(3)

AUTHOR
------
[verse]
--
*Steven Rostedt* <rostedt@goodmis.org>
--
REPORTING BUGS
--------------
Report bugs to  <rostedt@goodmis.org>

LICENSE
-------
libccli is Free Software licensed under the GNU LGPL 2.1

RESOURCES
---------
https://github.com/rostedt/libccli

COPYING
-------
Copyright \(C) 2022 Steven Rostedt. Free use of this software is granted under
the terms of the GNU Public License (GPL).
