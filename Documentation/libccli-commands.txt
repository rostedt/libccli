libccli(3)
==========

NAME
----
ccli_line_parse, ccli_line_reset, ccli_line_inject, ccli_line_refresh,
ccli_argv_free, ccli_history, ccli_execute - Commands for libccli callbacks.

SYNOPSIS
--------
[verse]
--
*#include <ccli.h>*

int *ccli_line_parse*(const char pass:[*]_line_, char pass:[ ***]_argv_);
void *ccli_argv_free*(char pass:[**]_argv_);

void *ccli_line_reset*(struct ccli pass:[*]_ccli_);
int *ccli_line_inject*(struct ccli pass:[*]_ccli_, char pass:[*]string, int _pos_);
void *ccli_line_refresh*(struct ccli pass:[*]_ccli_);

const char pass:[*]*ccli_history*(struct ccli pass:[*]_ccli_, int _past_);
const int *ccli_execute*(struct ccli pass:[*]_ccli_, const char pass:[*]_line_, bool _hist_);
--

DESCRIPTION
-----------
libccli is a simple API to create a CLI interface with the user.
After a descriptor is created from *ccli_alloc(3)* and a command is registered
with *ccli_register_command(3)* or one of the similar functions, these are
the functions that can be useful in the callback.

The *ccli_line_parse()* is a helper function to parse the line like the
command line would parse it and send it to the _callback_. This could
be handy for the _completion_ callback if it needs access to the
words in the _line_ before the cursor. An address of a string array
is passed to _argv_ and that will be allocated and the strings will be
assigned from the line. It must then be freed with *ccli_argv_free()*.

The *ccli_line_reset()* will clear the content in the command line.
This can be useful for the interrupt callback of *ccli_register_interrupt*(3),
if it needs to clear the line. This does not modify what is displayed
to the user, but only what is registered on the command internally.
The application is responsible for changing any of displayed content
using the *ccli_printf*(3) function.

The *ccli_line_inject*() will insert _string_ into the command line
saved internally, at _pos_. If _pos_ is negative, then it will insert
the text at the current location of the cursor. If _pos_ is greater than
the string length of the current command line, it will just append it.

If the interrupt callback uses *ccli_line_reset()* or *ccli_line_inject()*
it may want to call *ccli_line_refresh()*. This will update what is
displayed to the user. It will restore the prompt and what is on the
the command line internally.

The history of previous commands that were entered could be retrieved
via *ccli_history()* to get the pervious commands entered into the
_ccli_ descriptor. It will retrieve the command that was entered _past_
commands ago. This could be useful to replay a command from the default
callback this is registered by *ccli_register_default(3)*.

To execute lines outside the *ccli_loop*(3), the *ccli_execute()* can be
called. It will execute _line_ just as if a user typed it and hit "enter".
Note, the _line_ should not contain a new line ('\n') character, just the
text before a user would have hit "enter". If _hist_ is true then the command
entered will be visible in the history, otherwise it will not be.

RETURN VALUE
------------
*ccli_line_parse()* returns the number of words parsed in the line
   and allocated in _argv_, or -1 on error. Note, the value returned
   is 1 or more, then _argv_ must be freed with *ccli_argv_free()*.

*ccli_line_inject()* returns 0 on success and -1 on error.

*ccli_history()* returns the string that represents a command that was
   entered before defined by the _past_ parameter. If _past_ goes back
   farther than the history that is stored, then NULL is returned.
   Note that the string that is returned is internal to the _ccli_
   descriptor and should not be modified.

*ccli_execute()* returns what the command would return (the callback from
   *ccli_register_command*(3) or -1 with ERRNO set on internal error
   (failure to allocate memory).

ERRORS
------
The following errors are for all the above calls:

*ENOMEM* Memory allocation error.

*EINVAL* One of the input parameters was invalid.

EXAMPLE
-------
[source,c]
--
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <ccli.h>

static int reset_counter(struct ccli *ccli, const char *cmd, const char *line,
			 void *data, int argc, char **argv)
{
	long counter = *(long *)data;

	counter = 0;
	if (argc > 1)
		counter = atoi(argv[1]);

	*(long *)data = counter;

	ccli_printf(ccli, "%ld\n", counter);

	return 0;
}

static int do_default(struct ccli *ccli, const char *cmd, const char *line,
		      void *data, int argc, char **argv)
{
	long counter = *(long *)data;
	const char *hist;
	int inc = 1;

	hist = ccli_history(ccli, 1);
	if (hist) {
		argc = ccli_line_parse(hist, &argv);
		if (argc > 1) {
			inc = atoi(argv[1]);
			ccli_argv_free(argv);
		}
	}

	counter += inc;

	*(long *)data = counter;

	ccli_printf(ccli, "%ld\n", counter);

	return 0;
}

static int do_interrupt(struct ccli *ccli, const char *line, int pos, void *data)
{
	long counter = *(long *)data;
	char cnt[64];

	snprintf(cnt, 64, " %ld", counter);
	ccli_line_inject(ccli, cnt, strlen(line));
	ccli_line_refresh(ccli);

	return 0;
}

static int show_banner(struct ccli *ccli, const char *cmd, const char *line,
		       void *data, int argc, char **argv)
{
	/* Demonstrate a callback before the ccli_loop() */
	int i;

	for (i = 1; i < argc; i++) {
		if (i > 1)
			ccli_printf(ccli, " ");
		ccli_printf(ccli, "%s", argv[i]);
	}
	ccli_printf(ccli, "\n");

	return 0;
}

int main(int argc, char **argv)
{
	long counter = 0;

	struct ccli *ccli;

	ccli = ccli_alloc("myprompt> ", STDIN_FILENO, STDOUT_FILENO);

	ccli_register_command(ccli, "reset", reset_counter, (void *)&counter);
	ccli_register_command(ccli, "banner", show_banner, NULL);

	ccli_register_default(ccli, do_default, (void *)&counter);
	ccli_register_interrupt(ccli, do_interrupt, &counter);

	ccli_execute(ccli, "banner Show a running counter", false);
	ccli_loop(ccli);

	ccli_free(ccli);

	return 0;
}
--
FILES
-----
[verse]
--
*ccli.h*
	Header file to include in order to have access to the library APIs.
*-ccli*
	Linker switch to add when building a program that uses the library.
--

SEE ALSO
--------
*libccli*(3),
*ccli_alloc*(3),
*ccli_free*(3),
*ccli_register_command*(3),
*ccli_register_completion*(3),
*ccli_register_default*(3),
*ccli_register_unknown*(3),
*ccli_loop*(3)
*ccli_printf*(3)
*ccli_getchar*(3)

AUTHOR
------
[verse]
--
*Steven Rostedt* <rostedt@goodmis.org>
--
REPORTING BUGS
--------------
Report bugs to  <rostedt@goodmis.org>

LICENSE
-------
libccli is Free Software licensed under the GNU LGPL 2.1

RESOURCES
---------
https://github.com/rostedt/libccli

COPYING
-------
Copyright \(C) 2022 Steven Rostedt. Free use of this software is granted under
the terms of the GNU Public License (GPL).
