libccli(3)
==========

NAME
----
ccli_register_default, ccli_register_unknown, ccli_register_interrupt - Change defaults of the CLI interface

SYNOPSIS
--------
[verse]
--
*#include <ccli.h>*

int *ccli_register_default*(struct ccli pass:[*]_ccli_,
			  int (pass:[*]_callback_)(struct ccli pass:[*], const char pass:[*], const char pass:[*],
						   void pass:[*], int, char pass:[**]),
			  void pass:[*]_data_);

int *ccli_register_unknown*(struct ccli pass:[*]_ccli_,
			  int (pass:[*]_callback_)(struct ccli pass:[*], const char pass:[*], const char pass:[*],
						   void pass:[*], int, char pass:[**]),
			  void pass:[*]_data_);

int *ccli_register_interrupt*(struct ccli pass:[*]_ccli_,
			  int (pass:[*]_callback_)(struct ccli pass:[*], const char pass:[*], int, void pass:[*]);
--

DESCRIPTION
-----------
This is a simple API to create a CLI interface with the user. See *ccli_alloc*(3)
for more information.

The default operation of what happens when the user just hits enter (or
just has white space on the line) can be overridden with
*ccli_register_default()*. The _callback_ acts the same as for
*ccli_register_command*(3) but what gets passed to it is slightly different.
The _command_ will be an empty string (""), _argc_ will be 1 and _argv_
will be NULL.

The _callback_ has the following prototype:
[verse]
--
   int *callback*(struct ccli pass:[*]_ccli_, const char pass:[*]_command_, const char pass:[*]_line_,
		void pass:[*]_data_, int _argc_, char pass:[**]_argv_);
--

The operation of what happens when the user enters a command that is not
registered can be overridden with *ccli_register_known()*. The _callback_
of this function will be called no registered command matches what the
user entered. The _callback_ for this acts the same as for
*ccli_register_command()*, where the first word entered will be passed in
as the _command_.

When the user hits "Ctrl^C", the current default operation is to print
"^C" and exit. But this can be overriden by *ccli_register_interrupt()*,
which takes a _callback_ with the following prototype::

[verse]
--
   int *interrupt*(struct ccli pass:[*]_ccli_, const char pass:[*]_command_, const char pass:[*]_line_,
		 int _pos_, void pass:[*]_data_);
--

When the user hits Ctrl^C, the _callback_ will get called with the following
parameters:

_ccli_ - will be the _ccli_ descriptor returned by *ccli_alloc()*

_line_ - The full line of what the user had typed.

_pos_  - The current position of the users cursor.

_data_ - The _data_ that was passed in when the _callback_ was registered with
        *ccli_register_interrupt()*.


RETURN VALUE
------------
All the functions returns 0 on success and -1 on error.

ERRORS
------
The following errors are for all the above calls:

*ENOMEM* Memory allocation error.

*EINVAL* One of the input parameters was invalid.

EXAMPLE
-------
See *ccli_alloc*(3) for an example.

FILES
-----
[verse]
--
*ccli.h*
	Header file to include in order to have access to the library APIs.
*-ccli*
	Linker switch to add when building a program that uses the library.
--

SEE ALSO
--------
*libccli(3)*,
*ccli_alloc*(3),
*ccli_free*(3),
*ccli_in*(3),
*ccli_out*(3),
*ccli_register_command*(3),
*ccli_register_completion*(3),
*ccli_unregister_command*(3),
*ccli_loop*(3),
*ccli_printf*(3),
*ccli_vprintf*(3),
*ccli_getchar*(3)
*ccli_line_parse*(3),
*ccli_line_clear*(3),
*ccli_line_inject*(3),
*ccli_line_refresh*(3),
*ccli_argv_free*(3),
*ccli_history*(3),
*ccli_history_load*(3),
*ccli_history_save*(3),
*ccli_history_load_file*(3),
*ccli_history_save_file*(3),
*ccli_history_load_fd*(3),
*ccli_history_save_fd*(3)
*ccli_execute*(3)

AUTHOR
------
[verse]
--
*Steven Rostedt* <rostedt@goodmis.org>
--
REPORTING BUGS
--------------
Report bugs to  <rostedt@goodmis.org>

LICENSE
-------
libccli is Free Software licensed under the GNU LGPL 2.1

RESOURCES
---------
https://github.com/rostedt/libccli

COPYING
-------
Copyright \(C) 2022 Steven Rostedt. Free use of this software is granted under
the terms of the GNU Public License (GPL).
